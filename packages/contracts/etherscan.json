{"language":"Solidity","sources":{"src/ERC20KPIToken.sol":{"content":"pragma solidity 0.8.19;\n\nimport {IERC20Upgradeable, ERC20Upgradeable} from \"oz-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {SafeERC20Upgradeable} from \"oz-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"oz-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {IOraclesManager1} from \"carrot/interfaces/oracles-managers/IOraclesManager1.sol\";\nimport {IKPITokensManager1} from \"carrot/interfaces/kpi-tokens-managers/IKPITokensManager1.sol\";\nimport {Template, IBaseTemplatesManager} from \"carrot/interfaces/IBaseTemplatesManager.sol\";\nimport {\n    IERC20KPIToken,\n    Collateral,\n    OracleData,\n    CollateralWithoutToken,\n    FinalizableOracle,\n    FinalizableOracleWithoutAddress\n} from \"./interfaces/IERC20KPIToken.sol\";\nimport {TokenAmount, InitializeKPITokenParams} from \"carrot/commons/Types.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title ERC20 KPI token template implementation\n/// @dev A KPI token template implementation. The template produces ERC20 tokens\n/// that can be distributed arbitrarily to communities or specific entities in order\n/// to incentivize them to reach certain goals. Backing these tokens there are potentially\n/// a multitude of other ERC20 tokens (up to 5), the release of which is linked to\n/// reaching the predetermined goals. In order to check if these goals are reached\n/// on-chain, oracles are employed, and based on the results conveyed back to\n/// the KPI token template, the collaterals are either unlocked, sent back to the\n/// KPI token owner, or a mix of the 2. Interesting logic is additionally tied to\n/// the conditions and collaterals, such as the possibility to have a minimum\n/// payout (a per-collateral sum that will always be paid out to KPI token holders\n/// regardless of the fact that goals are reached or not), weighted conditions and\n/// multiple detached resolution or all-in-one reaching of goals (explained more in\n/// detail later).\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ncontract ERC20KPIToken is ERC20Upgradeable, IERC20KPIToken, ReentrancyGuardUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 internal constant INVALID_ANSWER = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    uint256 internal constant MULTIPLIER = 64;\n    uint256 internal constant UNIT = 1_000_000;\n\n    bool internal allOrNone;\n    uint16 internal toBeFinalized;\n    address public owner;\n    uint8 internal oraclesAmount;\n    uint8 internal collateralsAmount;\n    address internal kpiTokensManager;\n    uint128 internal kpiTokenTemplateVersion;\n    uint256 internal kpiTokenTemplateId;\n    string public description;\n    uint256 public expiration;\n    uint256 public creationTimestamp;\n    uint256 internal initialSupply;\n    uint256 internal totalWeight;\n    mapping(address => FinalizableOracleWithoutAddress) internal finalizableOracleByAddress;\n    mapping(uint256 => address) internal finalizableOracleAddressByIndex;\n    mapping(address => CollateralWithoutToken) internal collateral;\n    mapping(uint256 => address) internal collateralAddressByIndex;\n    mapping(address => uint256) internal registeredBurn;\n\n    error Forbidden();\n    error NotInitialized();\n    error InvalidCollateral();\n    error InvalidFeeReceiver();\n    error InvalidOraclesManager();\n    error InvalidOracleBounds();\n    error InvalidOracleWeights();\n    error InvalidExpiration();\n    error InvalidDescription();\n    error TooManyCollaterals();\n    error TooManyOracles();\n    error InvalidName();\n    error InvalidSymbol();\n    error InvalidTotalSupply();\n    error InvalidCreator();\n    error InvalidKpiTokensManager();\n    error InvalidMinimumPayoutAfterFee();\n    error DuplicatedCollateral();\n    error NotEnoughCollateral();\n    error NoOracles();\n    error NoCollaterals();\n    error NothingToRedeem();\n    error ZeroAddressToken();\n    error ZeroAddressReceiver();\n    error ZeroAddressOwner();\n    error NothingToRecover();\n    error NotEnoughValue();\n\n    event Initialize();\n    event CollectProtocolFee(address indexed token, uint256 amount, address indexed receiver);\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n    event Finalize(address indexed oracle, uint256 result);\n    event RecoverERC20(address indexed token, uint256 amount, address indexed receiver);\n    event Redeem(address indexed account, uint256 burned);\n    event RegisterRedemption(address indexed account, uint256 burned);\n    event RedeemCollateral(address indexed account, address indexed receiver, address token, uint256 amount);\n\n    /// @dev Initializes the template through the passed in data. This function is\n    /// generally invoked by the KPI tokens manager, in turn invoked by the factory,\n    /// in turn invoked by a KPI token creator.\n    /// @param _params The params are passed in a struct, and are:\n    /// - `creator`: the factory forwarded KPI token creator.\n    /// - `oraclesManager`: the factory forwarded address of the oracles manager.\n    /// - `kpiTokensManager`: the factory forwarded address of the KPI tokens manager.\n    /// - `feeReceiver`: the factory forwarded address of the fee receiver.\n    /// - `kpiTokenTemplateId`: the id of the template.\n    /// - `description`: an IPFS cid pointing to a file describing what the created campaign\n    ///    is about\n    /// - `expiration`: a timestamp determining the expiration date of the KPI token.\n    /// - `kpiTokenData`: an ABI-encoded structure forwarded by the factory from the KPI token\n    ///   creator, containing the initialization parameters for the ERC20 KPI token template.\n    ///   It's structured in the following way:\n    ///     - `Collateral[] memory _collaterals`: an array of `Collateral` structs detailing\n    ///       information about the collaterals to be used (a limit of maximum 5 different\n    ///       collateral is enforced, and duplicates are not allowed).\n    ///     - `string memory _erc20Name`: The name of the created ERC20 token.\n    ///     - `string memory _erc20Symbol`: The symbol of the created ERC20 token.\n    ///     - `string memory _erc20Supply`: The initial supply of the created ERC20 token.\n    /// - `_oraclesData`: an ABI-encoded structure forwarded by the factory from the KPI token\n    ///   creator, containing the initialization parameters for the chosen oracle templates.\n    ///   In particular the structure is formed in the following way:\n    ///   - `OracleData[] memory _oracleDatas`: data about the oracle, such as:\n    ///       - `uint256 _templateId`: the id of the chosen oracle template.\n    ///       - `uint256 _lowerBound`: the minimum value the oracle can report back for the\n    ///         goal attached to it to be considered reached.\n    ///       - `uint256 _higherBound`: the value the oracle can report back for the\n    ///         goal attached to it to be considered fully reached.\n    ///       - `uint256 _weight`: The oracle's weight determines its importance goal and how\n    ///         much of the collateral it \"governs\". If for example we have 2\n    ///         oracles A and B with respective weights 1 and 2, a third of the deposited\n    ///         collaterals goes towards incentivizing A, while the remaining 2/3rds go\n    ///         to B (i.e. the goal defined by the B oracle is valued as a more critical one\n    ///         to reach compared to A).\n    ///       - `uint256 _data`: ABI-encoded, oracle-specific data used to effectively\n    ///         instantiate the oracle.\n    ///   - `bool _allOrNone`: Whether all goals should be at least partly reached in\n    ///     order to unlock any collaterals to the KPI token holders.\n    function initialize(InitializeKPITokenParams memory _params) external payable override initializer {\n        initializeState(\n            _params.creator,\n            _params.kpiTokensManager,\n            _params.kpiTokenTemplateId,\n            _params.kpiTokenTemplateVersion,\n            _params.description,\n            _params.expiration,\n            _params.kpiTokenData\n        );\n\n        (Collateral[] memory _collaterals,,,) =\n            abi.decode(_params.kpiTokenData, (Collateral[], string, string, uint256));\n\n        collectCollateralsAndFees(_params.creator, _collaterals, _params.feeReceiver);\n        initializeOracles(_params.creator, _params.oraclesManager, _params.oraclesData);\n\n        emit Initialize();\n    }\n\n    /// @dev Utility function used to perform checks and partially initialize the state\n    /// of the KPI token. This is only invoked by the more generic `initialize` function.\n    /// @param _creator The factory forwarded KPI token creator.\n    /// @param _kpiTokensManager The factory forwarded address of the KPI tokens manager.\n    /// @param _kpiTokenTemplateId The id of the template.\n    /// @param _description An IPFS cid pointing to a structured file describing what the\n    /// KPI token is about.\n    /// @param _expiration A timestamp determining the expiration date of the KPI token.\n    /// @param _data ABI-encoded data used to configura the KPI token (see the doc of the\n    /// `initialize` function).\n    function initializeState(\n        address _creator,\n        address _kpiTokensManager,\n        uint256 _kpiTokenTemplateId,\n        uint128 _kpiTokenTemplateVersion,\n        string memory _description,\n        uint256 _expiration,\n        bytes memory _data\n    ) internal onlyInitializing {\n        if (bytes(_description).length == 0) revert InvalidDescription();\n        if (_expiration <= block.timestamp) revert InvalidExpiration();\n\n        (, string memory _erc20Name, string memory _erc20Symbol, uint256 _erc20Supply) =\n            abi.decode(_data, (Collateral[], string, string, uint256));\n\n        if (bytes(_erc20Name).length == 0) revert InvalidName();\n        if (bytes(_erc20Symbol).length == 0) revert InvalidSymbol();\n        if (_erc20Supply == 0) revert InvalidTotalSupply();\n\n        __ReentrancyGuard_init();\n        __ERC20_init(_erc20Name, _erc20Symbol);\n        _mint(_creator, _erc20Supply);\n\n        initialSupply = _erc20Supply;\n        owner = _creator;\n        description = _description;\n        expiration = _expiration;\n        creationTimestamp = block.timestamp;\n        kpiTokensManager = _kpiTokensManager;\n        kpiTokenTemplateId = _kpiTokenTemplateId;\n        kpiTokenTemplateVersion = _kpiTokenTemplateVersion;\n    }\n\n    /// @dev Utility function used to collect collaterals and fees from the KPI token\n    /// creator. This is only invoked by the more generic `initialize` function.\n    /// @param _creator The KPI token creator.\n    /// @param _collaterals The collaterals array as taken from the ABI-encoded data\n    /// passed in by the KPI token creator.\n    /// @param _feeReceiver The factory forwarded address of the fee receiver.\n    function collectCollateralsAndFees(address _creator, Collateral[] memory _collaterals, address _feeReceiver)\n        internal\n        onlyInitializing\n    {\n        if (_collaterals.length == 0) revert NoCollaterals();\n        if (_collaterals.length > 5) revert TooManyCollaterals();\n        if (_feeReceiver == address(0)) revert InvalidFeeReceiver();\n\n        collateralsAmount = uint8(_collaterals.length);\n\n        for (uint8 _i = 0; _i < _collaterals.length; _i++) {\n            Collateral memory _collateral = _collaterals[_i];\n            uint256 _collateralAmountBeforeFee = _collateral.amount;\n            if (\n                _collateral.token == address(0) || _collateralAmountBeforeFee == 0\n                    || _collateral.minimumPayout >= _collateralAmountBeforeFee\n            ) revert InvalidCollateral();\n            for (uint8 _j = _i + 1; _j < _collaterals.length; _j++) {\n                if (_collateral.token == _collaterals[_j].token) {\n                    revert DuplicatedCollateral();\n                }\n            }\n            uint256 _fee = (_collateralAmountBeforeFee * 3_000) / 1_000_000;\n            uint256 _amountMinusFees;\n            unchecked {\n                _amountMinusFees = _collateralAmountBeforeFee - _fee;\n            }\n            if (_amountMinusFees <= _collateral.minimumPayout) {\n                revert InvalidMinimumPayoutAfterFee();\n            }\n            unchecked {\n                _collateral.amount = _amountMinusFees;\n            }\n            collateral[_collateral.token].amount = _collateral.amount;\n            collateral[_collateral.token].minimumPayout = _collateral.minimumPayout;\n            collateral[_collateral.token].postFinalizationAmount = 0;\n            collateralAddressByIndex[_i] = _collateral.token;\n            IERC20Upgradeable(_collateral.token).safeTransferFrom(_creator, address(this), _collateralAmountBeforeFee);\n            if (_fee > 0) {\n                IERC20Upgradeable(_collateral.token).safeTransfer(_feeReceiver, _fee);\n                emit CollectProtocolFee(_collateral.token, _fee, _feeReceiver);\n            }\n        }\n    }\n\n    /// @dev Initializes the oracles tied to this KPI token (both the actual oracle\n    /// instantiation and configuration data needed to interpret the relayed result\n    /// at the KPI-token level). This function is only invoked by the `initialize` function.\n    /// @param _creator The KPI token creator.\n    /// @param _oraclesManager The address of the oracles manager, used to instantiate\n    /// the oracles.\n    /// @param _data ABI-encoded data used to create and configura the oracles (see\n    /// the doc of the `initialize` function for more on this).\n    function initializeOracles(address _creator, address _oraclesManager, bytes memory _data)\n        internal\n        onlyInitializing\n    {\n        (OracleData[] memory _oracleDatas, bool _allOrNone) = abi.decode(_data, (OracleData[], bool));\n\n        if (_oracleDatas.length == 0) revert NoOracles();\n        if (_oracleDatas.length > 5) revert TooManyOracles();\n        oraclesAmount = uint8(_oracleDatas.length);\n\n        uint256 _totalValue = 0;\n        for (uint16 _i = 0; _i < _oracleDatas.length; _i++) {\n            _totalValue += _oracleDatas[_i].value;\n        }\n        if (msg.value < _totalValue) revert NotEnoughValue();\n\n        uint256 _totalWeigth = 0;\n        for (uint16 _i = 0; _i < _oracleDatas.length; _i++) {\n            OracleData memory _oracleData = _oracleDatas[_i];\n            if (_oracleData.weight == 0) revert InvalidOracleWeights();\n            _totalWeigth += _oracleData.weight;\n            address _instance = IOraclesManager1(_oraclesManager).instantiate{value: _oracleData.value}(\n                _creator, _oracleData.templateId, _oracleData.data\n            );\n            finalizableOracleByAddress[_instance] =\n                FinalizableOracleWithoutAddress({weight: _oracleData.weight, finalResult: 0, finalized: false});\n            finalizableOracleAddressByIndex[_i] = _instance;\n        }\n\n        totalWeight = _totalWeigth;\n        toBeFinalized = uint16(_oracleDatas.length);\n        allOrNone = _allOrNone;\n    }\n\n    /// @dev Returns a storage pointer to the `FinalizableOracle` struct\n    /// associated with the given address, and reverts if there's none.\n    /// @param _address The finalizable oracle address.\n    /// @return The `FinalizableOracle` associated with the given address.\n    function finalizableOracle(address _address) internal view returns (FinalizableOracleWithoutAddress storage) {\n        FinalizableOracleWithoutAddress storage _finalizableOracle = finalizableOracleByAddress[_address];\n        if (_finalizableOracle.weight == 0 || _finalizableOracle.finalized) {\n            revert Forbidden();\n        }\n        return _finalizableOracle;\n    }\n\n    /// @dev Transfers ownership of the KPI token. The owner is the one that has a claim\n    /// over the unused, leftover collateral on finalization.\n    /// @param _newOwner The new owner.\n    // TODO: add tests\n    function transferOwnership(address _newOwner) external override {\n        if (_newOwner == address(0)) revert ZeroAddressOwner();\n        address _owner = owner;\n        if (msg.sender != _owner) revert Forbidden();\n        owner = _newOwner;\n        emit OwnershipTransferred(_owner, _newOwner);\n    }\n\n    /// @dev Used by oracles linked to the KPI token to communicate their finalization.\n    ///\n    /// This function is exclusively callable by oracles linked with the KPI token in\n    /// order to report the final outcome (in goal completion percentage in parts per\n    /// million) for an unlocking condition once everything has played out \"in the real\n    /// world\".\n    /// Based on the reported percentage and the KPI token's configuration, collateral is\n    /// either reserved to be redeemed by KPI token holders when full finalization is\n    /// reached (i.e. when all the oracles have reported their final result), or sent\n    /// back to the KPI token owner (for example when KPIs have not been\n    /// met, minus any present minimum payout). The possible scenarios are the following:\n    ///\n    /// If a goal percentage is either invalid or 0:\n    /// - If an \"all or none\" approach has been chosen at the KPI token initialization\n    /// time, all the collateral is sent back to the KPI token owner and the KPI token\n    /// expires worthless on the spot.\n    /// - If no \"all or none\" condition has been set, the KPI contracts calculates how\n    /// much of the collaterals the specific oracle \"governed\" (through the weighting\n    /// mechanism), subtracts any minimum payout for these and sends back the right amount\n    /// of collateral to the KPI token owner.\n    ///\n    /// If a result is in a 0-100% exclusive range (and NOT above the higher bound) set for\n    /// the KPI, the same calculations happen and some of the collateral gets sent back\n    /// to the KPI token owner depending on how far we were from reaching the full KPI\n    /// progress.\n    ///\n    /// If a percentage is at or above 100% completion, pretty much nothing happens to the\n    /// collateral, which is fully assigned to the KPI token holders and which will become\n    /// redeemable once the finalization process has ended for all the oracles assigned to\n    /// the KPI token.\n    ///\n    /// Once all the oracles associated with the KPI token have reported their end result and\n    /// finalize, the remaining collateral, if any, becomes redeemable by KPI token holders.\n    /// @param _result The finalizing oracle's end result.\n    function finalize(uint256 _result) external override nonReentrant {\n        FinalizableOracleWithoutAddress storage _oracle = finalizableOracle(msg.sender);\n        if (_isFinalized() || _isExpired()) {\n            _oracle.finalized = true;\n            emit Finalize(msg.sender, _result);\n            return;\n        }\n\n        if (_result == 0 || _result == INVALID_ANSWER) {\n            bool _allOrNone = allOrNone;\n            handleLowOrInvalidResult(_oracle, _allOrNone);\n            if (_allOrNone) {\n                toBeFinalized = 0;\n                _oracle.finalized = true;\n                registerPostFinalizationCollateralAmounts();\n                emit Finalize(msg.sender, _result);\n                return;\n            }\n        } else {\n            handleIntermediateOrOverHigherBoundResult(_oracle, _result);\n        }\n\n        _oracle.finalResult = _result;\n        _oracle.finalized = true;\n        unchecked {\n            --toBeFinalized;\n        }\n\n        if (_isFinalized()) registerPostFinalizationCollateralAmounts();\n\n        emit Finalize(msg.sender, _result);\n    }\n\n    /// @dev Handles collateral state changes in case an oracle reported a low or invalid\n    /// answer. In particular:\n    /// - If an \"all or none\" approach has been chosen at the KPI token initialization\n    /// level, all the collateral minus any minimum payout is marked to be recovered\n    /// by the KPI token owner. From the KPI token holder's point of view, the token\n    /// expires worthless on the spot.\n    /// - If no \"all or none\" condition has been set, the KPI contract calculates how\n    /// much of the collaterals the specific condition \"governed\" (through the weighting\n    /// mechanism), subtracts any minimum payout for these and sends back the right amount\n    /// of collateral to the KPI token owner.\n    /// @param _oracle The oracle being finalized.\n    /// @param _allOrNone Whether all the oracles are in an \"all or none\" configuration or not.\n    function handleLowOrInvalidResult(FinalizableOracleWithoutAddress storage _oracle, bool _allOrNone) internal {\n        for (uint256 _i = 0; _i < collateralsAmount; _i++) {\n            CollateralWithoutToken storage _collateral = collateral[collateralAddressByIndex[_i]];\n            uint256 _reimbursement;\n            if (_allOrNone) {\n                unchecked {\n                    _reimbursement = _collateral.amount - _collateral.minimumPayout;\n                }\n            } else {\n                uint256 _numerator = ((_collateral.amount - _collateral.minimumPayout) * _oracle.weight) << MULTIPLIER;\n                _reimbursement = (_numerator / totalWeight) >> MULTIPLIER;\n            }\n            unchecked {\n                _collateral.amount -= _reimbursement;\n            }\n        }\n    }\n\n    /// @dev Handles collateral state changes in case an oracle reported an intermediate answer.\n    /// In particular if a result is in the specified range (and NOT above the higher bound) set\n    /// for the KPI, the same calculations happen and some of the collateral gets sent back\n    /// to the KPI token owner depending on how far we were from reaching the full KPI\n    /// progress.\n    ///\n    /// If a result is at or above the higher bound set for the KPI token, pretty much\n    /// nothing happens to the collateral, which is fully assigned to the KPI token holders\n    /// and which will become redeemable once the finalization process has ended for all\n    /// the oracles assigned to the KPI token.\n    ///\n    /// Once all the oracles associated with the KPI token have reported their end result and\n    /// finalize, the remaining collateral, if any, becomes redeemable by KPI token holders.\n    /// @param _oracle The oracle being finalized.\n    /// @param _result The result the oracle is reporting.\n    function handleIntermediateOrOverHigherBoundResult(FinalizableOracleWithoutAddress storage _oracle, uint256 _result)\n        internal\n    {\n        if (_result < UNIT) {\n            for (uint256 _i = 0; _i < collateralsAmount; _i++) {\n                CollateralWithoutToken storage _collateral = collateral[collateralAddressByIndex[_i]];\n                uint256 _numerator =\n                    ((_collateral.amount - _collateral.minimumPayout) * _oracle.weight * (UNIT - _result)) << MULTIPLIER;\n                uint256 _denominator = UNIT * totalWeight;\n                uint256 _reimbursement = (_numerator / _denominator) >> MULTIPLIER;\n                unchecked {\n                    _collateral.amount -= _reimbursement;\n                }\n            }\n        }\n    }\n\n    /// @dev After the KPI token has successfully been finalized, this function snapshots\n    /// the collaterals state before any redemptions happens. This is used to be able\n    /// to handle the separate burn/redeem feature, increasing the overall security of the\n    /// solution (a subset of malicious/unresponsive tokens will not be enough to lock\n    /// the whole campaign).\n    function registerPostFinalizationCollateralAmounts() internal {\n        for (uint8 _i = 0; _i < collateralsAmount; _i++) {\n            CollateralWithoutToken storage _collateral = collateral[collateralAddressByIndex[_i]];\n            _collateral.postFinalizationAmount = _collateral.amount;\n        }\n    }\n\n    /// @dev Callable by the KPI token owner, this function lets them recover any ERC20\n    /// token sent to the KPI token contract. An arbitrary receiver address can be specified\n    /// so that the function can be used to also help users that did something wrong by\n    /// mistake by sending ERC20 tokens here. Two scenarios are possible:\n    /// - The KPI token owner wants to recover unused collateral that has been unlocked\n    ///   by the KPI token after one or more oracle finalizations.\n    /// - The KPI token owner wants to recover an arbitrary ERC20 token sent by mistake\n    ///   to the KPI token contract (even the ERC20 KPI token itself can be recovered from\n    ///   the contract).\n    /// @param _token The ERC20 token address to be rescued.\n    /// @param _receiver The address to which the recovered ERC20 tokens (if any) will be sent.\n    function recoverERC20(address _token, address _receiver) external override {\n        if (_receiver == address(0)) revert ZeroAddressReceiver();\n        if (msg.sender != owner) revert Forbidden();\n        bool _expired = _isExpired();\n        CollateralWithoutToken storage _collateral = collateral[_token];\n        if (_collateral.amount > 0) {\n            uint256 _balance = IERC20Upgradeable(_token).balanceOf(address(this));\n            uint256 _unneededBalance = _balance;\n            if (_expired) {\n                _collateral.amount = _collateral.minimumPayout;\n            }\n            unchecked {\n                _unneededBalance -= _collateral.amount;\n            }\n            if (_unneededBalance == 0) revert NothingToRecover();\n            IERC20Upgradeable(_token).safeTransfer(_receiver, _unneededBalance);\n            emit RecoverERC20(_token, _unneededBalance, _receiver);\n            return;\n        }\n        uint256 _reimbursement = IERC20Upgradeable(_token).balanceOf(address(this));\n        if (_reimbursement == 0) revert NothingToRecover();\n        IERC20Upgradeable(_token).safeTransfer(_receiver, _reimbursement);\n        emit RecoverERC20(_token, _reimbursement, _receiver);\n    }\n\n    /// @dev Only callable by KPI token holders, this function lets them redeem\n    /// any collateral left in the contract after finalization, proportional to\n    /// their share of the total KPI token supply and left collateral amount.\n    /// If the KPI token has expired worthless, this simply burns the user's KPI tokens.\n    /// @param _data ABI-encoded data specifying the redeem parameters. In this\n    /// specific case the ABI encoded parameter is an address that will receive\n    /// the redeemed collaterals (if any).\n    function redeem(bytes calldata _data) external override {\n        address _receiver = abi.decode(_data, (address));\n        if (_receiver == address(0)) revert ZeroAddressReceiver();\n        if (!_isFinalized() && block.timestamp < expiration) revert Forbidden();\n        uint256 _kpiTokenBalance = balanceOf(msg.sender);\n        if (_kpiTokenBalance == 0) revert Forbidden();\n        _burn(msg.sender, _kpiTokenBalance);\n        bool _expired = _isExpired();\n        uint256 _initialSupply = initialSupply;\n        for (uint8 _i = 0; _i < collateralsAmount; _i++) {\n            address _collateralAddress = collateralAddressByIndex[_i];\n            CollateralWithoutToken storage _collateral = collateral[_collateralAddress];\n            uint256 _redeemableAmount = 0;\n            unchecked {\n                _redeemableAmount = (\n                    (_expired ? _collateral.minimumPayout : _collateral.postFinalizationAmount) * _kpiTokenBalance\n                ) / _initialSupply;\n                _collateral.amount -= _redeemableAmount;\n            }\n            IERC20Upgradeable(_collateralAddress).safeTransfer(_receiver, _redeemableAmount);\n        }\n        emit Redeem(msg.sender, _kpiTokenBalance);\n    }\n\n    /// @dev Only callable by KPI token holders, lets them register their redemption\n    /// by burning the KPI tokens they have. Using this function, any collateral gained\n    /// by the KPI token resolution must be explicitly requested by the user through\n    /// the `redeemCollateral` function.\n    function registerRedemption() external override {\n        if (!_isFinalized() && block.timestamp < expiration) revert Forbidden();\n        uint256 _kpiTokenBalance = balanceOf(msg.sender);\n        if (_kpiTokenBalance == 0) revert Forbidden();\n        _burn(msg.sender, _kpiTokenBalance);\n        registeredBurn[msg.sender] += _kpiTokenBalance;\n        emit RegisterRedemption(msg.sender, _kpiTokenBalance);\n    }\n\n    /// @dev Only callable by KPI token holders that have previously explicitly burned their\n    /// KPI tokens through the `registerRedemption` function, this redeems the collateral\n    /// token specified as input in the function. The function reverts if either an invalid\n    /// collateral is specified or if zero of the given collateral can be redeemed.\n    function redeemCollateral(address _token, address _receiver) external override {\n        if (_token == address(0)) revert ZeroAddressToken();\n        if (_receiver == address(0)) revert ZeroAddressReceiver();\n        if (!_isFinalized() && block.timestamp < expiration) revert Forbidden();\n        uint256 _burned = registeredBurn[msg.sender];\n        if (_burned == 0) revert Forbidden();\n        CollateralWithoutToken storage _collateral = collateral[_token];\n        if (_collateral.amount == 0) revert NothingToRedeem();\n        uint256 _redeemableAmount;\n        unchecked {\n            _redeemableAmount = (\n                (_isExpired() ? _collateral.minimumPayout : _collateral.postFinalizationAmount) * _burned\n            ) / initialSupply - _collateral.redeemedBy[msg.sender];\n            if (_redeemableAmount == 0) revert NothingToRedeem();\n            _collateral.amount -= _redeemableAmount;\n        }\n        if (_redeemableAmount == 0) revert Forbidden();\n        _collateral.redeemedBy[msg.sender] += _redeemableAmount;\n        IERC20Upgradeable(_token).safeTransfer(_receiver, _redeemableAmount);\n        emit RedeemCollateral(msg.sender, _receiver, _token, _redeemableAmount);\n    }\n\n    /// @dev View function to check if the KPI token is finalized.\n    /// @return A bool describing whether the token is finalized or not.\n    function _isFinalized() internal view returns (bool) {\n        return toBeFinalized == 0;\n    }\n\n    /// @dev View function to check if the KPI token is finalized.\n    /// @return A bool describing whether the token is finalized or not.\n    function finalized() external view override returns (bool) {\n        return _isFinalized();\n    }\n\n    /// @dev View function to check if the KPI token is expired. A KPI token is\n    /// considered expired when not finalized before the expiration date comes.\n    /// @return A bool describing whether the token is finalized or not.\n    function _isExpired() internal view returns (bool) {\n        return !_isFinalized() && expiration <= block.timestamp;\n    }\n\n    /// @dev View function to check if the KPI token is initialized.\n    /// @return A bool describing whether the token is initialized or not.\n    function _isInitialized() internal view returns (bool) {\n        return owner != address(0);\n    }\n\n    /// @dev View function to query all the oracles associated with the KPI token at once.\n    /// @return The oracles array.\n    function oracles() external view override returns (address[] memory) {\n        if (!_isInitialized()) revert NotInitialized();\n        address[] memory _oracleAddresses = new address[](oraclesAmount);\n        for (uint256 _i = 0; _i < _oracleAddresses.length; _i++) {\n            _oracleAddresses[_i] = finalizableOracleAddressByIndex[_i];\n        }\n        return _oracleAddresses;\n    }\n\n    /// @dev View function returning all the most important data about the KPI token, in\n    /// an ABI-encoded structure. The structure includes collaterals, finalizable oracles,\n    /// \"all-or-none\" flag, initial supply of the ERC20 KPI token, along with name and symbol.\n    /// @return The ABI-encoded data.\n    function data() external view returns (bytes memory) {\n        FinalizableOracle[] memory _finalizableOracles = new FinalizableOracle[](oraclesAmount);\n        for (uint256 _i = 0; _i < _finalizableOracles.length; _i++) {\n            address _addrezz = finalizableOracleAddressByIndex[_i];\n            FinalizableOracleWithoutAddress memory _finalizableOracle = finalizableOracleByAddress[_addrezz];\n            _finalizableOracles[_i] = FinalizableOracle({\n                addrezz: _addrezz,\n                weight: _finalizableOracle.weight,\n                finalResult: _finalizableOracle.finalResult,\n                finalized: _finalizableOracle.finalized\n            });\n        }\n        Collateral[] memory _collaterals = new Collateral[](collateralsAmount);\n        for (uint256 _i = 0; _i < _collaterals.length; _i++) {\n            address _collateralAddress = collateralAddressByIndex[_i];\n            CollateralWithoutToken storage _collateral = collateral[_collateralAddress];\n            _collaterals[_i] = Collateral({\n                token: _collateralAddress,\n                amount: _collateral.amount,\n                minimumPayout: _collateral.minimumPayout\n            });\n        }\n        return abi.encode(_collaterals, _finalizableOracles, allOrNone, initialSupply);\n    }\n\n    /// @dev View function returning info about the template used to instantiate this KPI token.\n    /// @return The template struct.\n    function template() external view override returns (Template memory) {\n        return IBaseTemplatesManager(kpiTokensManager).template(kpiTokenTemplateId, kpiTokenTemplateVersion);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"lib/carrot/contracts/interfaces/oracles-managers/IOraclesManager1.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {IBaseTemplatesManager} from \"../IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Oracles manager interface\n/// @dev Interface for the oracles manager contract.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IOraclesManager1 is IBaseTemplatesManager {\n    function predictInstanceAddress(\n        address _creator,\n        uint256 _id,\n        bytes memory _initializationData\n    ) external view returns (address);\n\n    function instantiate(\n        address _creator,\n        uint256 _id,\n        bytes memory _initializationData\n    ) external payable returns (address);\n}\n"},"lib/carrot/contracts/interfaces/kpi-tokens-managers/IKPITokensManager1.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {IBaseTemplatesManager} from \"../IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title KPI tokens manager interface\n/// @dev Interface for the KPI tokens manager contract.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IKPITokensManager1 is IBaseTemplatesManager {\n    function predictInstanceAddress(\n        address _creator,\n        uint256 _id,\n        string memory _description,\n        uint256 _expiration,\n        bytes memory _initializationData,\n        bytes memory _oraclesInitializationData\n    ) external view returns (address);\n\n    function instantiate(\n        address _creator,\n        uint256 _templateId,\n        string memory _description,\n        uint256 _expiration,\n        bytes memory _initializationData,\n        bytes memory _oraclesInitializationData\n    ) external returns (address, uint128);\n}\n"},"lib/carrot/contracts/interfaces/IBaseTemplatesManager.sol":{"content":"pragma solidity >=0.8.0;\n\nstruct Template {\n    address addrezz;\n    uint128 version;\n    uint256 id;\n    string specification;\n}\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Base templates manager interface\n/// @dev Interface for the base templates manager contract.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IBaseTemplatesManager {\n    function addTemplate(address _template, string calldata _specification)\n        external;\n\n    function removeTemplate(uint256 _id) external;\n\n    function upgradeTemplate(\n        uint256 _id,\n        address _newTemplate,\n        string calldata _newSpecification\n    ) external;\n\n    function updateTemplateSpecification(\n        uint256 _id,\n        string calldata _newSpecification\n    ) external;\n\n    function updateTemplateSpecification(\n        uint256 _id,\n        uint128 _version,\n        string calldata _newSpecification\n    ) external;\n\n    function template(uint256 _id) external view returns (Template memory);\n\n    function template(uint256 _id, uint128 _version)\n        external\n        view\n        returns (Template memory);\n\n    function exists(uint256 _id) external view returns (bool);\n\n    function templatesAmount() external view returns (uint256);\n\n    function nextTemplateId() external view returns (uint256);\n\n    function enumerate(uint256 _fromIndex, uint256 _toIndex)\n        external\n        view\n        returns (Template[] memory);\n}\n"},"src/interfaces/IERC20KPIToken.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {IERC20Upgradeable} from \"oz-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport {IKPIToken} from \"carrot/interfaces/kpi-tokens/IKPIToken.sol\";\n\nstruct OracleData {\n    uint256 templateId;\n    uint256 weight;\n    uint256 value;\n    bytes data;\n}\n\nstruct Collateral {\n    address token;\n    uint256 amount;\n    uint256 minimumPayout;\n}\n\nstruct CollateralWithoutToken {\n    uint256 amount;\n    uint256 minimumPayout;\n    uint256 postFinalizationAmount;\n    mapping(address => uint256) redeemedBy;\n}\n\nstruct FinalizableOracle {\n    address addrezz;\n    uint256 weight;\n    uint256 finalResult;\n    bool finalized;\n}\n\nstruct FinalizableOracleWithoutAddress {\n    uint256 weight;\n    uint256 finalResult;\n    bool finalized;\n}\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title ERC20 KPI token interface\n/// @dev Interface for the ERC20 KPI token contract.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IERC20KPIToken is IKPIToken, IERC20Upgradeable {\n    function recoverERC20(address _token, address _receiver) external;\n\n    function registerRedemption() external;\n\n    function redeemCollateral(address _token, address _receiver) external;\n}\n"},"lib/carrot/contracts/commons/Types.sol":{"content":"pragma solidity >=0.8.0;\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Types\n/// @dev General collection of reusable types.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\n\nstruct TokenAmount {\n    address token;\n    uint256 amount;\n}\n\nstruct InitializeKPITokenParams {\n    address creator;\n    address oraclesManager;\n    address kpiTokensManager;\n    address feeReceiver;\n    uint256 kpiTokenTemplateId;\n    uint128 kpiTokenTemplateVersion;\n    string description;\n    uint256 expiration;\n    bytes kpiTokenData;\n    bytes oraclesData;\n}\n\nstruct InitializeOracleParams {\n    address creator;\n    address kpiToken;\n    uint256 templateId;\n    uint128 templateVersion;\n    bytes data;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"lib/carrot/contracts/interfaces/kpi-tokens/IKPIToken.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {InitializeKPITokenParams} from \"../../commons/Types.sol\";\nimport {IKPITokensManager1} from \"../kpi-tokens-managers/IKPITokensManager1.sol\";\nimport {Template} from \"../IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title KPI token interface\n/// @dev KPI token interface.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IKPIToken {\n    function initialize(InitializeKPITokenParams memory _params)\n        external\n        payable;\n\n    function finalize(uint256 _result) external;\n\n    function redeem(bytes memory _data) external;\n\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function template() external view returns (Template memory);\n\n    function description() external view returns (string memory);\n\n    function finalized() external view returns (bool);\n\n    function expiration() external view returns (uint256);\n\n    function creationTimestamp() external view returns (uint256);\n\n    function data() external view returns (bytes memory);\n\n    function oracles() external view returns (address[] memory);\n}\n"}},"settings":{"remappings":["carrot/=lib/carrot/contracts/","ds-test/=lib/ds-test/src/","forge-std/=lib/forge-std/src/","oz-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","oz/=lib/openzeppelin-contracts/contracts/","tests/=test/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","permit2/=lib/permit2/","solmate/=lib/permit2/lib/solmate/"],"optimizer":{"enabled":true,"runs":1000000},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","viaIR":true,"libraries":{}}}
